{"version":3,"sources":["mustache.js"],"names":["global","factory","exports","module","define","amd","self","Mustache","this","objectToString","Object","prototype","toString","isArray","Array","object","call","isFunction","escapeRegExp","string","replace","hasProperty","obj","propName","regExpTest","RegExp","test","nonSpaceRe","isWhitespace","re","testRegExp","entityMap","&","<",">","\"","'","/","`","=","whiteRe","spaceRe","equalsRe","curlyRe","tagRe","Scanner","tail","pos","Context","view","parentContext","cache",".","parent","Writer","templateCache","_cache","set","key","value","get","clear","eos","scan","match","index","substring","length","scanUntil","search","push","lookup","name","primitive","hasOwnProperty","intermediateValue","names","context","lookupHit","indexOf","split","clearCache","parse","template","tags","cacheKey","mustache","join","isCacheEnabled","tokens","undefined","openingTagRe","closingTagRe","closingCurlyRe","lineHasNonSpace","sections","spaces","hasTag","nonSpace","indentation","tagIndex","stripSpace","pop","compileTags","tagsToCompile","Error","start","type","chr","token","openSection","scanner","i","valueLength","charAt","nestedTokens","collector","numTokens","nestTokens","lastToken","squashedTokens","squashTokens","parseTemplate","render","partials","config","getConfigTags","renderTokens","originalTemplate","symbol","buffer","renderSection","renderInverted","renderPartial","unescapedValue","escapedValue","rawValue","j","slice","indentPartial","partial","filteredIndentation","partialByNl","indentedValue","escape","getConfigEscape","String","version","defaultWriter","TypeError","s"],"mappings":"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","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = global || self, global.Mustache = factory());\n}(this, (function () { 'use strict';\n\n  /*!\n   * mustache.js - Logic-less {{mustache}} templates with JavaScript\n   * http://github.com/janl/mustache.js\n   */\n\n  var objectToString = Object.prototype.toString;\n  var isArray = Array.isArray || function isArrayPolyfill (object) {\n    return objectToString.call(object) === '[object Array]';\n  };\n\n  function isFunction (object) {\n    return typeof object === 'function';\n  }\n\n  /**\n   * More correct typeof string handling array\n   * which normally returns typeof 'object'\n   */\n  function typeStr (obj) {\n    return isArray(obj) ? 'array' : typeof obj;\n  }\n\n  function escapeRegExp (string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  /**\n   * Null safe way of checking whether or not an object,\n   * including its prototype, has a given property\n   */\n  function hasProperty (obj, propName) {\n    return obj != null && typeof obj === 'object' && (propName in obj);\n  }\n\n  /**\n   * Safe way of detecting whether or not the given thing is a primitive and\n   * whether it has the given property\n   */\n  function primitiveHasOwnProperty (primitive, propName) {\n    return (\n      primitive != null\n      && typeof primitive !== 'object'\n      && primitive.hasOwnProperty\n      && primitive.hasOwnProperty(propName)\n    );\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var regExpTest = RegExp.prototype.test;\n  function testRegExp (re, string) {\n    return regExpTest.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace (string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n\n  function escapeHtml (string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   *\n   * Tokens for partials also contain two more elements: 1) a string value of\n   * indendation prior to that tag and 2) the index of that tag on that line -\n   * eg a value of 2 indicates the partial is the third tag on this line.\n   */\n  function parseTemplate (template, tags) {\n    if (!template)\n      return [];\n    var lineHasNonSpace = false;\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n    var indentation = '';  // Tracks indentation for tags that use it\n    var tagIndex = 0;      // Stores a count of number of tags encountered on a line\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace () {\n      if (hasTag && !nonSpace) {\n        while (spaces.length)\n          delete tokens[spaces.pop()];\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags (tagsToCompile) {\n      if (typeof tagsToCompile === 'string')\n        tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n        throw new Error('Invalid tags: ' + tagsToCompile);\n\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n\n    var scanner = new Scanner(template);\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n            indentation += chr;\n          } else {\n            nonSpace = true;\n            lineHasNonSpace = true;\n            indentation += ' ';\n          }\n\n          tokens.push([ 'text', chr, start, start + 1 ]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n') {\n            stripSpace();\n            indentation = '';\n            tagIndex = 0;\n            lineHasNonSpace = false;\n          }\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe))\n        break;\n\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe))\n        throw new Error('Unclosed tag at ' + scanner.pos);\n\n      if (type == '>') {\n        token = [ type, value, start, scanner.pos, indentation, tagIndex, lineHasNonSpace ];\n      } else {\n        token = [ type, value, start, scanner.pos ];\n      }\n      tagIndex++;\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection)\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n        if (openSection[1] !== value)\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    stripSpace();\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection)\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens (tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens (tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n        case '#':\n        case '^':\n          collector.push(token);\n          sections.push(token);\n          collector = token[4] = [];\n          break;\n        case '/':\n          section = sections.pop();\n          section[5] = token[2];\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n          break;\n        default:\n          collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner (string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function eos () {\n    return this.tail === '';\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function scan (re) {\n    var match = this.tail.match(re);\n\n    if (!match || match.index !== 0)\n      return '';\n\n    var string = match[0];\n\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function scanUntil (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n      case -1:\n        match = this.tail;\n        this.tail = '';\n        break;\n      case 0:\n        match = '';\n        break;\n      default:\n        match = this.tail.substring(0, index);\n        this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context (view, parentContext) {\n    this.view = view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function push (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function lookup (name) {\n    var cache = this.cache;\n\n    var value;\n    if (cache.hasOwnProperty(name)) {\n      value = cache[name];\n    } else {\n      var context = this, intermediateValue, names, index, lookupHit = false;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          intermediateValue = context.view;\n          names = name.split('.');\n          index = 0;\n\n          /**\n           * Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           *\n           * In the case where dot notation is used, we consider the lookup\n           * to be successful even if the last \"object\" in the path is\n           * not actually an object but a primitive (e.g., a string, or an\n           * integer), because it is sometimes useful to access a property\n           * of an autoboxed primitive, such as the length of a string.\n           **/\n          while (intermediateValue != null && index < names.length) {\n            if (index === names.length - 1)\n              lookupHit = (\n                hasProperty(intermediateValue, names[index])\n                || primitiveHasOwnProperty(intermediateValue, names[index])\n              );\n\n            intermediateValue = intermediateValue[names[index++]];\n          }\n        } else {\n          intermediateValue = context.view[name];\n\n          /**\n           * Only checking against `hasProperty`, which always returns `false` if\n           * `context.view` is not an object. Deliberately omitting the check\n           * against `primitiveHasOwnProperty` if dot notation is not used.\n           *\n           * Consider this example:\n           * ```\n           * Mustache.render(\"The length of a football field is {{#length}}{{length}}{{/length}}.\", {length: \"100 yards\"})\n           * ```\n           *\n           * If we were to check also against `primitiveHasOwnProperty`, as we do\n           * in the dot notation case, then render call would return:\n           *\n           * \"The length of a football field is 9.\"\n           *\n           * rather than the expected:\n           *\n           * \"The length of a football field is 100 yards.\"\n           **/\n          lookupHit = hasProperty(context.view, name);\n        }\n\n        if (lookupHit) {\n          value = intermediateValue;\n          break;\n        }\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value))\n      value = value.call(this.view);\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer () {\n    this.templateCache = {\n      _cache: {},\n      set: function set (key, value) {\n        this._cache[key] = value;\n      },\n      get: function get (key) {\n        return this._cache[key];\n      },\n      clear: function clear () {\n        this._cache = {};\n      }\n    };\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function clearCache () {\n    if (typeof this.templateCache !== 'undefined') {\n      this.templateCache.clear();\n    }\n  };\n\n  /**\n   * Parses and caches the given `template` according to the given `tags` or\n   * `mustache.tags` if `tags` is omitted,  and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function parse (template, tags) {\n    var cache = this.templateCache;\n    var cacheKey = template + ':' + (tags || mustache.tags).join(':');\n    var isCacheEnabled = typeof cache !== 'undefined';\n    var tokens = isCacheEnabled ? cache.get(cacheKey) : undefined;\n\n    if (tokens == undefined) {\n      tokens = parseTemplate(template, tags);\n      isCacheEnabled && cache.set(cacheKey, tokens);\n    }\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   *\n   * If the optional `config` argument is given here, then it should be an\n   * object with a `tags` attribute or an `escape` attribute or both.\n   * If an array is passed, then it will be interpreted the same way as\n   * a `tags` attribute on a `config` object.\n   *\n   * The `tags` attribute of a `config` object must be an array with two\n   * string values: the opening and closing tags used in the template (e.g.\n   * [ \"<%\", \"%>\" ]). The default is to mustache.tags.\n   *\n   * The `escape` attribute of a `config` object must be a function which\n   * accepts a string as input and outputs a safely escaped string.\n   * If an `escape` function is not provided, then an HTML-safe string\n   * escaping function is used as the default.\n   */\n  Writer.prototype.render = function render (template, view, partials, config) {\n    var tags = this.getConfigTags(config);\n    var tokens = this.parse(template, tags);\n    var context = (view instanceof Context) ? view : new Context(view, undefined);\n    return this.renderTokens(tokens, context, partials, template, config);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate, config) {\n    var buffer = '';\n\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate, config);\n      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate, config);\n      else if (symbol === '>') value = this.renderPartial(token, context, partials, config);\n      else if (symbol === '&') value = this.unescapedValue(token, context);\n      else if (symbol === 'name') value = this.escapedValue(token, context, config);\n      else if (symbol === 'text') value = this.rawValue(token);\n\n      if (value !== undefined)\n        buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate, config) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender (template) {\n      return self.render(template, context, partials, config);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate, config);\n      }\n    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate, config);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string')\n        throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n      if (value != null)\n        buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate, config);\n    }\n    return buffer;\n  };\n\n  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate, config) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || (isArray(value) && value.length === 0))\n      return this.renderTokens(token[4], context, partials, originalTemplate, config);\n  };\n\n  Writer.prototype.indentPartial = function indentPartial (partial, indentation, lineHasNonSpace) {\n    var filteredIndentation = indentation.replace(/[^ \\t]/g, '');\n    var partialByNl = partial.split('\\n');\n    for (var i = 0; i < partialByNl.length; i++) {\n      if (partialByNl[i].length && (i > 0 || !lineHasNonSpace)) {\n        partialByNl[i] = filteredIndentation + partialByNl[i];\n      }\n    }\n    return partialByNl.join('\\n');\n  };\n\n  Writer.prototype.renderPartial = function renderPartial (token, context, partials, config) {\n    if (!partials) return;\n    var tags = this.getConfigTags(config);\n\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null) {\n      var lineHasNonSpace = token[6];\n      var tagIndex = token[5];\n      var indentation = token[4];\n      var indentedValue = value;\n      if (tagIndex == 0 && indentation) {\n        indentedValue = this.indentPartial(value, indentation, lineHasNonSpace);\n      }\n      var tokens = this.parse(indentedValue, tags);\n      return this.renderTokens(tokens, context, partials, indentedValue, config);\n    }\n  };\n\n  Writer.prototype.unescapedValue = function unescapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return value;\n  };\n\n  Writer.prototype.escapedValue = function escapedValue (token, context, config) {\n    var escape = this.getConfigEscape(config) || mustache.escape;\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return (typeof value === 'number' && escape === mustache.escape) ? String(value) : escape(value);\n  };\n\n  Writer.prototype.rawValue = function rawValue (token) {\n    return token[1];\n  };\n\n  Writer.prototype.getConfigTags = function getConfigTags (config) {\n    if (isArray(config)) {\n      return config;\n    }\n    else if (config && typeof config === 'object') {\n      return config.tags;\n    }\n    else {\n      return undefined;\n    }\n  };\n\n  Writer.prototype.getConfigEscape = function getConfigEscape (config) {\n    if (config && typeof config === 'object' && !isArray(config)) {\n      return config.escape;\n    }\n    else {\n      return undefined;\n    }\n  };\n\n  var mustache = {\n    name: 'mustache.js',\n    version: '4.2.0',\n    tags: [ '{{', '}}' ],\n    clearCache: undefined,\n    escape: undefined,\n    parse: undefined,\n    render: undefined,\n    Scanner: undefined,\n    Context: undefined,\n    Writer: undefined,\n    /**\n     * Allows a user to override the default caching strategy, by providing an\n     * object with set, get and clear methods. This can also be used to disable\n     * the cache by setting it to the literal `undefined`.\n     */\n    set templateCache (cache) {\n      defaultWriter.templateCache = cache;\n    },\n    /**\n     * Gets the default or overridden caching object from the default writer.\n     */\n    get templateCache () {\n      return defaultWriter.templateCache;\n    }\n  };\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function clearCache () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function parse (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view`, `partials`, and `config`\n   * using the default writer.\n   */\n  mustache.render = function render (template, view, partials, config) {\n    if (typeof template !== 'string') {\n      throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                          'but \"' + typeStr(template) + '\" was given as the first ' +\n                          'argument for mustache#render(template, view, partials)');\n    }\n\n    return defaultWriter.render(template, view, partials, config);\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n  return mustache;\n\n})));\n"],"file":"mustache.js"}